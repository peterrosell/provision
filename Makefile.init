TARGET_MACHINE?=amd64

RS_ENDPOINT?=https://localhost:8092
DRP_VERSION?=stable

ifeq ($(TARGET_MACHINE), amd64)
	CPU_ARCH=amd64
	DOCKERFILE=Dockerfile
else
	CPU_ARCH=armv7
	DOCKERFILE=Dockerfile.$TARGET_MACHINE
endif

DOCKER_IMAGE=provision:latest-$(CPU_ARCH)

DRPCLI=docker run -it --rm --entrypoint drpcli $(DOCKER_IMAGE)

.PHONY: init
init: change-default-password install-core-task-library install-community-core-library install-boot-envs install-certs-plugin install-krib 

.PHONY: drp-version
drp-version:
	@$(DRPCLI) version

.PHONY: change-default-password
change-default-password:
	@$(DRPCLI) version

.PHONY: install-libraries
install-libraries:
	drpcli contents upload catalog:task-library-$(DRP_VERSION)
	drpcli contents upload catalog:drp-community-content-$(DRP_VERSION)
	drpcli contents upload catalog:dev-library-$(DRP_VERSION)
	drpcli contents upload catalog:coreos-$(DRP_VERSION)

.PHONY: install-boot-envs
install-boot-envs:
	drpcli bootenvs uploadiso sledgehammer
	drpcli bootenvs uploadiso ubuntu-18.04-install
	drpcli bootenvs uploadiso centos-7-install

.PHONY: set-default-workflow
set-default-workflow:
	drpcli prefs set defaultWorkflow discover-base unknownBootEnv discovery

.PHONY: create-local-subnet
create-local-subnet:
	cat local-subnet.json | drpcli subnets create -

# Check for latest version https://qww9e4paf1.execute-api.us-west-2.amazonaws.com/main/catalog/plugins/certs
.PHONY: install-certs-plugin
install-cert-plugin:
	cp ./bin/certs_$(CPU_ARCH) /tmp/certs
	drpcli plugin_providers upload certs from /tmp/certs
	drpcli plugins show certs | jq .Available

.PHONY: install-ipmi-plugin
install-ipmi-plugin:
	drpcli contents upload ipmi-$(DRP_VERSION)

.PHONY: install-krib
install-krib:
	drpcli contents upload krib-$(DRP_VERSION)

.PHONY: install-krib-latest
install-krib-latest:
	$(eval DIR = $(shell mktemp -d -t krib.XXXXX))
	cd $(DIR) && \
	git clone https://github.com/digitalrebar/provision-content && \
	cd provision-content && \
	tools/package.sh && \
	drpcli contents upload krib.yaml

# // Same as above, but manually with curl
#	@curl -sL 'https://s3-us-west-2.amazonaws.com/rebar-catalog/rackn-catalog.json?v=gQYsjEg4NU' --compressed \
#		| jq '.sections.catalog_items' \
#		| jq -r 'map( { (.Meta.DisplayName|tostring): . } ) | add | ."Core Task Library".Source' \
#		| xargs -n 1 curl -Ls {} \
#		| drpcli contents create -
